Q. What is Emmet?
A. Emmet is a free add-on for our text editor that allows us to type shortcuts that are 
   then expanded to the full pieces of code.

Q. Difference between Library and Framework?
A. Library - By Using Library we can control the flow of programe. We can invoked Library whenever 
   and wherever we like.
   Framework - Contrary to the Library , when we use Framework flow is controlled by Framework. Framework
   instruct us where we put our code. It will call our code as required.

Q. What is `NPM`?
A. It manages our packages. Our application either react, angular or any Framework or Library to make them
   powerful and faster it's need helper packages(It just module and some piece of codes) that packages are
   present inside NPM.

Q. What is `Parcel/Webpack`? Why do we need it?
A. Parcel is a beast. Parcel/Webpack is a bundler that makes our app faster by minifying, optimize, clean our code, 
   create dev server , caching while development provide hot module replacement(It automatically rebuild the
   the changed file). It's transpile our javascript code for older browsers with browserList. It caches everything. If we restart the
   server it will rebuild only the files that have changed since the last time ran. Parcel automatically track
   all the files, plugins, configurations and dev dependcies that involed to our build.

Q. What is `.parcel-cache`?
A. It sores all cache files.

Q. What is `npx` ?
A. Execute using npm.

Q. What is difference between `dependencies` vs `devDependencies`?
A. For application multiple packages or modules are required some for local machine and some for production server.
   So that modules we manage with dependencies and devDependencies. dependcies thos required for production server 
   we put in package.json file inside dependcies and thos only for development we put inside devDependencies.

Q. What is Transitive dependcies?
A. We have package manager for our app and that package have their own dependecies of others package manager.
   and that packages have their own dependecies of package manager. So that dependency of package manager 
   manages and handle by  of our code.

Q. What is Tree Shaking?
A. Parcel also statically analyzes the import and export of each modules and removes everything that is not used.
   This is called "Tree shaking" or "Dead code elimination". Tree shaking supported for both dynamic and static
   import, CommonJs, ES modules and even across languages with Css modules.

Q. What is Hot Module Replacement?
A. It's file watcher. It's check in our application if any file has changed it automatically rebuild and changed 
   the file.

Q. What is `.gitignore`? What should we add and not add into it?
A. '.gitIgnore' is a file where we put the file or folder extenstion which we dont to push on our repo.
   You can everything in git ignore that you can regenerate again on server.

Q. What is the difference between `package.json` and `package-lock.json`?
A. 'package.json' it maintains the version of our library dependencies which we are using in our application.
    and 'package-lock' lock that package dependcies for us and tell us which version exactly we are using.

Q. Why should I not modify `package-lock.json`?
A. Because it is auto generated file and it's tell us which exactly version we are using of library and their 
   dependent libabry. we should not add package-lock in .gitIgnore so the server can install same version which 
   we are using in our dvelopment. If we change something in package-lock.json then we can face codes are breaking
   on the server.

Q. What is `node_modules` ? Is it a good idea to push that on git?
A. Node modules are the data base of our package manager library. No we should push node_modules on git.
   we should always put this in .gitIgnore.

Q. What is the `dist` folder?
A. It is our build folder for our applications. Everything is in minified form in dist folder.

Q. What is `browserlists`?
A. It transpile our code and make our code compatible for diffrent browser It maintains browser comtability 
   and we can provide which browser or which version of browser our app should support. 
   i.e ["last 2 Chrome versions"].(it will defenetly work for chrome last 2 version)

Q. Read about: ^ - caret and ~ - tilda?
A. ^ - caret : It's update to minor version if it is minor version update : i.e "1.4.5" to "1.4.6"
   ~ - tilda: It's update to major version if it is major version update: i.1 "2.3.4" to "2.4.0";


Q. Is JSX mandatory for React?
A . NO - It's not mandatory for react. we can write code in javascript with React.createElement.
    // React.createElement => Object => HTML(DOM)

Q. Is ES6 mandatory for React?
A. No we can write normal javascript in react.

Q. {TitleComponent} vs {<TitleComponent/>} vs {<TitleComponent></TitleComponent>} in JSX?
A  {TitleComponent} --> This is React Element variable (like <h1>Hello</h1>) or Javascript function.
   {<TitleComponent/>} --> This is react component with self closing tag or javascript function, that's returns JSX from function.
   and we can send props(properties) via this like we send arguments and recieve param in normal javascript function.
   {<TitleComponent></TitleComponent>} --> This same as {<TitleComponent/>}.

Q. How can I write comments in JSX?
A.  {
    // like this
    };

Q. What is <React.Fragment></React.Fragment> and <></> ?
A. React.Fragment is component which is exported by React. It is like empty tag (<></>). we use this because JSX
   need to have one parent elements. If there are multiple multiline element.

Q. What is Virtual DOM & What is Reconciliation in React & What is React Fiber?
A. Virtual Dom is representation of DOM. It's Create DOM tree and it's uses Reconcilation algorithm to find out
   the difference between Actual DOM and Virtual DOM and then finds what needs to be updated. Reconcilation use
   Diff algorithm and it's checks which components need to be updated and it's uddate only that component not
   whole Actual DOM.
   React update this Reconcilation algorithm with React Fiber. It does same thing but in a faster and better way.

Q. Why we need keys in React? When do we need keys in React?
A. We need keys in React. Because Key represent the uniqness of element. It help React to what component needs to be
   render. If we are using we can improve DOM manipulation safe with unecessary render of whole element or components.

Q. Can we use index as keys in React?
A. Yes! But if there is no uniq value for key then only.
   no key <<<< index as Key <<<<< uniq value as key.

Q. What is props in React? Ways to
A. Via props in React component we can pass the required data. it's same like javaScript function params and arguments.

Q. What is a Config Driven UI ?
A. API controls what kind of data should shown as per requirement.


Q. What is the difference between Named Export, Default export and * as export?
A. In named export we import method inside {} i.e if we are exporting multiple method from one file we can use
   named import to import all those method i.e "import {Header} from '../header' ".
   In Default export we can import method directly without {}. Beacuse in default export we can only do one default
   export in export file.
   In * as export is like we are importing all method from file in a one go. But we can not use default export with
   this.

Q. What is the importance of config.js file
A. We can put all hard coded value in config file.

Q. What are React Hooks?
A. React hooks are just a java script function.

Q. Why do we need a useState Hook?
A. React use only one way data binding. In react we can use normal local javascript variable but we can show the changed value
   of this local variable in the UI. React has no idea about this local vairable. So React says every time you want 
   that your variable to sync with the UI youe needs to use useState(). This means you are creating state variable.
   If the value of state is upadated react re render whole component and it's check whats updated and re render that 
   specific element. It is using Diff Algorithm(Reconcilation).